activities the philosophers will perform and will have to be printed :
- take a fork (maybe even specify right or left)
- eat : has to take two forks before, has to drop the forks after then sleep
- sleep : nothing happens just assign the time that was given by user input, then think
- think : i guess that is just a waiting period and then eat
- die : if time_to_die is <= then the time between last eating period and now -> die

- in this case what is a fork ??

- give a number to each philosopher/thread
- 

personal notes :

- number of forks is = to number of philosophers.
- on utilise une array de t_philo
- les forks sont des mutexs
- au debut prendre le temps du debut et le temps du last meal sont les memes car c'est comme si ils venaient de naitre.
- la return value de pthread_create est 0 pour statut succes, si echec elle retourne message tel que EAGAIN (insufficient system resources to create another thread) and EINVAL (invalid thread attributes).
- meme chose pour pthread_join
- la fonction routine envoyee a une fonction pthread doit avoir une return value void * et un parametre unique void *
- chaque action que mon programme peut executer va avoir un mutex pour pouvoir faire son action oklm
- difference entre init/destroy et lock/unlock a mutex

subject : 
https://github.com/rgilles42/Philosophers/blob/main/subject.pdf

resources:
https://github.com/DeRuina/philosophers


today :

- regarder la structure de plusieurs projet
- ecrire la structure de mon projet

steps :
- on check les inputs -> OK
- on cree le nombre de philosophers necessaire -> OK
- on cree les forks -> OK
- on assigne les values dans une struct -> OK
- on initialise les philos, on leur donne des index -> OK
- on assigne les temps donnes dans l'input -> OK
- on assigne le temps grace a une fonction pour le temps de debut (que je dois coder moi meme) -> XXX
- on assigne les mutex du programmes -> XXX
- on assigne les forks gauche et droite -> OK

debut des threads :
- on va creer un thread et on va checker dedans si tt le monde a mange ou si qqn est mort c'est grace a ca qu'on check le statut des philo -> XXX
- dans la fonction eat beaucoup de choses se passent : on lock les forks et on print bcp de choses : prise des forks, graille, on update le time du last meal, on incremente le nombre de repas graille -> OK
- on va joindre toutes les threads creees -> OK
- a la fin il faut destroy les mutexs du programme et les forks qui sont aussi des mutexs -> OK



faire aujourd'hui :

- savoir quand utiliser les mutex dans mes fonctions actions
- faire mes fonctions tailored : usleep and gettimeofday in ms
- comprendre mutex lock/unlock
- comprendre ma fonction checker, ce qu'elle performe et SURTOUT ce qu'elle doit contenir
- savoir exactement quand printer
- savoir comment exit le programme



note -> en vrai tu peux vraiment le faire mon ft_check_arg

il faut que tu comprennes pourquoi il faut plusieurs types de lock

questions :

- est ce qu'on modifier une valeur pour toutes les structs en une fois ?

- pourquoi dans cette fonction il utilise le lock du philo index 0 ?

int	check_if_dead(t_philo *philos)
{
	int	i;

	i = 0;
	while (i < philos[0].num_of_philos)
	{
		if (philosopher_dead(&philos[i], philos[i].time_to_die))
		{
			print_message("died", &philos[i], philos[i].id);
			pthread_mutex_lock(philos[0].dead_lock);
			*philos->dead = 1;
			pthread_mutex_unlock(philos[0].dead_lock);
			return (1);
		}
		i++;
	}
	return (0);
}
